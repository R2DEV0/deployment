{"version":3,"sources":["views/AddNew.js","views/Main.js","App.js","serviceWorker.js","index.js"],"names":["props","useState","name","setName","due_date","setDue_date","errors","setErrors","nameError","setNameError","className","to","style","marginTop","onSubmit","e","data","preventDefault","axios","post","then","res","navigate","catch","err","errorResponse","response","errorArr","Object","keys","key","push","message","htmlFor","type","onChange","target","value","length","color","map","error","idx","project","setProject","loaded","setLoaded","projectCompleted","setProjectCompleted","projectStarted","setProjectStarted","projectBacklog","setProjectBacklog","useEffect","notStarted","notCompleted","completed","get","item","i","isStarted","isComplete","update","startProj","id","status","put","console","log","projectCopy","selectedProject","toggleStarted","completeProj","toggleComplete","display","verticalAlign","width","textAlign","fontWeight","border","padding","listStyle","onClick","_id","marginRight","marginLeft","delete","filter","App","marginBottom","textDecoration","Main","path","AddNew","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f21e4bdc.chunk.js","sourcesContent":["import React,{ useState, useEffect } from 'react';\r\nimport { Link, navigate } from '@reach/router';\r\nimport axios from 'axios';\r\n\r\n\r\nexport default (props) => {\r\n\r\n    const [name, setName] = useState('');\r\n    const [due_date, setDue_date] = useState('')\r\n    const [errors, setErrors] = useState([]);\r\n    const [nameError, setNameError] = useState('');\r\n    const [dateError, setDateError] = useState('');\r\n    const [project, setProject] = useState('')\r\n\r\n    const onSubmit = (e, data) => {\r\n        e.preventDefault();\r\n        axios.post('http://localhost:8000/api/projects', data)\r\n        .then(res => {\r\n            navigate('/');\r\n        })\r\n        .catch(err => {\r\n            const errorResponse = err.response.data.errors;\r\n            const errorArr=[];\r\n\r\n            for(const key of Object.keys(errorResponse)){\r\n                errorArr.push(errorResponse[key].message)\r\n            }\r\n            setErrors(errorArr);\r\n        })\r\n    }\r\n\r\n    const nameHandler = (e) => {\r\n        setName(e.target.value);\r\n        if(e.target.value.length < 3){\r\n            setNameError('Project name must have at least 3 characters.')\r\n        }\r\n        else if(e.target.value.length > 2){\r\n            setNameError(\"\")\r\n        }\r\n    }\r\n\r\n\r\n    return(\r\n        <div className='container'>\r\n            <Link to ='/'>Back to Dashboard</Link>\r\n            <div className='form' style={{marginTop: '20px'}}>\r\n                <form onSubmit={e => onSubmit(e, {name, due_date})}>\r\n                    <div>\r\n                        <label htmlFor='name'>Project: </label>\r\n                        <input type ='text' name='name' onChange={nameHandler} />\r\n                    </div>\r\n                    {\r\n                    nameError ?\r\n                    <p style={{color:'red'}}>{ nameError }</p> :\r\n                    ''\r\n                    }\r\n                    <div> \r\n                        <lable htmlFor='due_date'>Due Date: </lable>\r\n                        <input type='date' name='due_date' onChange={(e) => setDue_date(e.target.value)} />\r\n                    </div>\r\n                    <button className='btn btn-primary btn-md' style={{marginTop: '20px'}}>Submit</button>\r\n                </form>\r\n            </div>\r\n            {errors.map((error, idx)=> {\r\n                return(\r\n                    <p style={{ color:'red' }}key={idx}>{error}</p>\r\n                )\r\n            })}\r\n        </div>\r\n    )\r\n\r\n}","import React,{ useState, useEffect } from 'react';\r\nimport { Link, navigate } from '@reach/router';\r\nimport axios from 'axios';\r\nimport moment from 'moment';\r\n\r\nexport default (props) => {\r\n    const[project, setProject] = useState('');\r\n    const[loaded, setLoaded] = useState(false);\r\n    const[projectCompleted, setProjectCompleted] = useState({});\r\n    const[projectStarted, setProjectStarted] = useState({});\r\n    const[projectBacklog, setProjectBacklog] = useState({});\r\n    \r\n\r\n\r\n    useEffect(() => {\r\n        let notStarted =[];\r\n        let notCompleted =[];\r\n        let completed =[];\r\n        axios.get('http://localhost:8000/api/projects')\r\n        .then(res => {\r\n            setProject(res.data);\r\n            res.data.map((item, i) => {\r\n                if(item.isStarted === false){\r\n                    notStarted.push(item)\r\n                }\r\n                else if(item.isStarted == true && item.isComplete === false){\r\n                    notCompleted.push(item)\r\n                }\r\n                else if(item.isComplete == true && item.isStarted === true){\r\n                    completed.push(item)\r\n                }\r\n            })\r\n            setProjectBacklog(notStarted);\r\n            setProjectStarted(notCompleted);\r\n            setProjectCompleted(completed);\r\n            update();\r\n            setLoaded(true)\r\n        })\r\n    }, []);\r\n\r\n    const update = () => {\r\n        let notStarted =[];\r\n        let notCompleted =[];\r\n        let completed =[];\r\n        axios.get('http://localhost:8000/api/projects')\r\n        .then(res => {\r\n            setProject(res.data);\r\n            res.data.map((item, i) => {\r\n                if(item.isStarted === false){\r\n                    notStarted.push(item)\r\n                }\r\n                else if(item.isStarted == true && item.isComplete === false || item.isComplete === null){\r\n                    notCompleted.push(item)\r\n                }\r\n                else if(item.isComplete == true){\r\n                    completed.push(item)\r\n                }\r\n            })\r\n            setProjectBacklog(notStarted);\r\n            setProjectStarted(notCompleted);\r\n            setProjectCompleted(completed);\r\n            setLoaded(true)\r\n        })\r\n    };\r\n\r\n    const toggleStarted = (i) => {\r\n        const projectCopy = [...project];\r\n        const selectedProject = projectCopy[i];\r\n        selectedProject.isStarted = !selectedProject.isStarted;\r\n        setProject(projectCopy);\r\n        update();\r\n    }\r\n\r\n    const toggleComplete = (i) => {\r\n        const projectCopy = [...project];\r\n        const selectedProject = projectCopy[i];\r\n        selectedProject.isComplete = !selectedProject.isComplete;\r\n        setProject(projectCopy);\r\n        update(); \r\n    }\r\n\r\n\r\n    const startProj = (id, status, i, name, due_date, isComplete) => {\r\n        axios.put(`http://localhost:8000/api/update/${id}`, {'isStarted': !status, 'name': name, 'due_date': due_date, 'isComplete': isComplete })\r\n            .then(res => {\r\n                console.log(res)\r\n                toggleStarted(i)\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n            })\r\n        }\r\n\r\n    const completeProj = (id, status, i, name, due_date, isStarted) => {\r\n        axios.put(`http://localhost:8000/api/update/${id}`, {'isComplete': !status, 'name': name, 'due_date': due_date, 'isComplete': isStarted })\r\n            .then(res => {\r\n                console.log(res)\r\n                toggleComplete(i)\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n            })\r\n        }\r\n\r\n\r\n    const deleteHandler = (id) => {\r\n        axios.delete(`http://localhost:8000/api/projects/${id}`)\r\n            .then(res => {\r\n                console.log(res);\r\n                setProject(project.filter(project => project._id !== id));\r\n                update()\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n            })\r\n        }\r\n\r\n\r\n    const addNew = (e) => {\r\n        navigate('/create')\r\n    }\r\n\r\n\r\n\r\n    return(\r\n        <div className='container'>\r\n            <div style={{display: 'inline-block', verticalAlign:'top', width:'350px'}}>\r\n                <h4 style={{textAlign:'center', fontWeight: 'bold'}} >Backlog</h4>\r\n                {loaded && <div style={{display: 'inline-block'}}>\r\n                    {projectBacklog.map((item, i) => { return <ul key={i} style={{border: '1px solid black', padding:'10px', listStyle:'none'}}>\r\n                        <li>Project: {item.name}</li>\r\n                        <li>Due by: {item.due_date}</li>\r\n                        <li><button className='btn btn-outline-secondary btn-sm' onClick={(e) => {startProj(item._id, item.isStarted, i, item.name, item.due_date, item.isComplete)}}>Start Project</button></li>\r\n                    </ul>})}\r\n                </div>}\r\n            </div>\r\n\r\n        <div style={{display: 'inline-block', verticalAlign:'top', width:'350px'}}>\r\n            <h4 style={{textAlign:'center',fontWeight: 'bold'}}>Started</h4>\r\n            {loaded && <div style={{display: 'inline-block', marginRight:'20px', marginLeft: '20px'}}>\r\n                    {projectStarted.map((item, i) => { return <ul key={i} style={{border: '1px solid black', padding:'10px', listStyle:'none'}}>\r\n                        <li>Project: {item.name}</li>\r\n                        <li>Due by: {item.due_date}</li>\r\n                        <li><button className='btn btn-outline-primary btn-sm' onClick={(e) => {completeProj(item._id, item.isComplete, i, item.name, item.due_date, item.isStarted)}} >Completed</button></li>\r\n                    </ul>\r\n                })}\r\n            </div>}\r\n        </div>\r\n\r\n        <div style={{display: 'inline-block', verticalAlign:'top', width:'350px'}}>\r\n            <h4 style={{textAlign:'center', fontWeight: 'bold'}}>Completed</h4>\r\n            {loaded && <div style={{display: 'inline-block'}}>\r\n                {projectCompleted.map((item, i) => { return <ul key={i} style={{border: '1px solid black', padding:'10px', listStyle:'none'}}>\r\n                    <li>Project: {item.name}</li>\r\n                    <li>Due by: {item.due_date}</li>\r\n                    <li><button className='btn btn-outline-danger btn-sm' onClick={(e) => {deleteHandler(item._id)}} >Delete Project</button></li>\r\n                </ul>})}\r\n            </div>}\r\n            </div>\r\n\r\n            <div>\r\n                <button className='btn btn-primary btn-md'onClick={addNew} style={{marginTop: '50px'}}>Add New Project</button>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}","import React from 'react';\nimport './App.css';\nimport { Router } from '@reach/router';\nimport AddNew from './views/AddNew';\nimport Main from './views/Main';\n\nfunction App() {\n\n  return (\n    <div className=\"container\" style={{textAlign:'center'}}>\n      <h2 style={{textAlign:'center', marginBottom: '50px', textDecoration:'underline'}}>Project Manager</h2>\n      <Router>\n        <Main path ='/'/>\n        <AddNew path = '/create' />\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}